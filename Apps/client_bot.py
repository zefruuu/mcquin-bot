import sqlite3
import random
from telebot import TeleBot
from Tokens import client_tok
import threading

TOKEN = client_tok.key
bot = TeleBot(TOKEN)


user_command_count = {}


def init_db():
    conn = sqlite3.connect('user_data.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            balance INTEGER DEFAULT 10  -- –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å 10 –º–æ–Ω–µ—Ç
        )
    ''')
    conn.commit()
    conn.close()


def get_user_balance(user_id):
    conn = sqlite3.connect('user_data.db')
    cursor = conn.cursor()
    cursor.execute('SELECT balance FROM users WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    if result is None:
        cursor.execute('INSERT INTO users (user_id, balance) VALUES (?, ?)', (user_id, 10))  # –°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å 10 –º–æ–Ω–µ—Ç
        conn.commit()
        balance = 10
    else:
        balance = result[0]
    conn.close()
    return balance


def update_user_balance(user_id, amount):
    conn = sqlite3.connect('user_data.db')
    cursor = conn.cursor()
    cursor.execute('UPDATE users SET balance = balance + ? WHERE user_id = ?', (amount, user_id))
    conn.commit()
    conn.close()


def add_coin_every_2_hours():
    try:
            conn = sqlite3.connect('user_data.db')
            cursor = conn.cursor()
            cursor.execute('SELECT user_id FROM users')
            users = cursor.fetchall()
            for user in users:
                user_id = user[0]
            update_user_balance(user_id, 1)
            print(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ 1 –º–æ–Ω–µ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            conn.close()    



threading.Timer(7200, add_coin_every_2_hours).start()


add_coin_every_2_hours()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(commands=['balance'])
def show_balance(message):
    user_id = message.from_user.id
    balance = get_user_balance(user_id)
    bot.send_message(message.chat.id, f'–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç–æ–∫üí∞')

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏
@bot.message_handler(commands=['get_image'])
def get_image(message):
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    balance = get_user_balance(user_id)

    if balance >= 2:
        update_user_balance(user_id, -2)  # –°–Ω–∏–º–∞–µ–º –¥–≤–µ –º–æ–Ω–µ—Ç–∫–∏
        send_random_image(message)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    else:
        bot.send_message(message.chat.id, f"""–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —à—É—Ç–æ—á–∫–∏ –ø—Ä–æ –º–∞–º–∞—à—É –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –∂–¥–∏ –∏–ª–∏ –ø–æ–ø–æ–ª–Ω—è–π –±–∞–ª–∞–Ω—Å
–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç–æ–∫üí∞ """)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏
def send_random_image(message):
    conn = sqlite3.connect('image_database.db')
    cursor = conn.cursor()
    cursor.execute('SELECT image FROM images ORDER BY RANDOM() LIMIT 1')
    image = cursor.fetchone()
    conn.close()

    if image:
        bot.send_photo(message.chat.id, image[0])
    else:
        bot.send_message(message.chat.id, 'No images in the database')

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(
        message.chat.id,
        """–û—É –¥–∞, –ú–∞–∫–≤–∏–Ω –≥–æ—Ç–æ–≤!üöò
–•–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —à—É—Ç–æ—á–∫–∏ –ø—Ä–æ –º–∞–º–∞—à—É –ø–∏—à–∏ - /get_image üåº 
–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å –º–æ–Ω–µ—Ç–æ–∫ - /balance


–ó–∞–∫–∞–∑ —Ç–µ–ª–≥—Ä–∞–º–º/–¥–∏—Å–∫–æ—Ä–¥ –±–æ—Ç–∞ - @zefruuu"""
    )
  #donat
@bot.message_handler(commands=['donate'])
def donat(message):
        bot.send_message(
                message.chat.id,
                    """üí∏–î–æ–Ω–∞—Çüí∏
                    
40 –º–æ–Ω–µ—Ç–æ–∫üí∞(20 –∫–∞—Ä—Ç–∏–Ω–æ–∫) - 40 —Ä—É–±/20 –≥—Ä–Ω/230 —Ç–µ–Ω–≥–µ/0.5 –¥–æ–ª–ª–∞—Ä–æ–≤
80 –º–æ–Ω–µ—Ç–æ–∫üí∞(40 –∫–∞—Ä—Ç–∏–Ω–æ–∫) - 75 —Ä—É–±/30 –≥—Ä–Ω/500 —Ç–µ–Ω–≥–µ/0.7 –¥–æ–ª–ª–∞—Ä–æ–≤"""

        )

        # donat
@bot.message_handler(commands=['help'])
def hellp(message):
            bot.send_message(
            message.chat.id,
                """üÜò–ü–æ–º–æ—â—åüÜò
                
/get_image - –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—ÉÔ∏èüñº
/balance - –≤–∞—à –±–∞–ª–∞–Ω—Å –º–æ–Ω–µ—Ç–æ–∫üëõ
/start - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞üîÑ
/help - –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã‚ñ∂Ô∏è"""
            )

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–µ—Ç
@bot.message_handler(commands=['addmoney'])
def add_money(message):
    try:
        user_id = message.from_user.id
        amount = int(message.text.split()[1])
        update_user_balance(user_id, amount)

        new_balance = get_user_balance(user_id)
        bot.send_message(message.chat.id, f'–ú–æ–Ω–µ—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã, –õ—é–±–ª—é –∏–ª—é—à—É')
    except (IndexError, ValueError):
        bot.send_message(message.chat.id, '/addmoney <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>')
    except Exception as e:
        bot.send_message(message.chat.id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')





# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
init_db()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.infinity_polling()


