import sqlite3
import random
import types

from telebot import TeleBot
from Tokens import client_tok
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
import threading
import time

TOKEN = client_tok.key
bot = TeleBot(TOKEN)


user_command_count = {}


def init_db():
    conn = sqlite3.connect('user_data.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            balance INTEGER DEFAULT 10  -- –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å 10 –º–æ–Ω–µ—Ç
        )
    ''')
    conn.commit()
    conn.close()


def get_user_balance(user_id):
    conn = sqlite3.connect('user_data.db')
    cursor = conn.cursor()
    cursor.execute('SELECT balance FROM users WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    if result is None:
        cursor.execute('INSERT INTO users (user_id, balance) VALUES (?, ?)', (user_id, 10)) 
        conn.commit()
        balance = 10
    else:
        balance = result[0]
    conn.close()
    return balance

def update_user_balance(user_id, amount):
    conn = sqlite3.connect('user_data.db')
    cursor = conn.cursor()
    cursor.execute('UPDATE users SET balance = balance + ? WHERE user_id = ?', (amount, user_id))
    conn.commit()
    conn.close()

def add_coin_every_2_hours(stop_timer):
    try:
        conn = sqlite3.connect('user_data.db')
        cursor = conn.cursor()
        cursor.execute('SELECT user_id FROM users')
        users = cursor.fetchall()
        for user in users:
            user_id = user[0]
            balance = get_user_balance(user_id)
            if balance < 100:
                update_user_balance(user_id, 1)
                print(f"+ 1 social creditüí≥ for {user_id}")
            else:
                print(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {user_id} ")
                stop_timer.set()
        conn.close()
    except ValueError:
        print('error')

def run_add_coin(stop_timer):
    while True:
        if not stop_timer.is_set():
            add_coin_every_2_hours(stop_timer)
            time.sleep(5) #—Ç–∞–π–º –∫–∞—Ä–æ—á
        else:
            conn = sqlite3.connect('user_data.db')
            cursor = conn.cursor()
            cursor.execute('SELECT user_id FROM users WHERE balance < 100')
            users = cursor.fetchall()
            if users:
                stop_timer.clear()
            conn.close()
            time.sleep(7200) #—Ç–∞–π–º –∫–∞—Ä–æ—á —è–∫—â–æ —á–µ–ª —Å–≤–∏–Ω–∫–∞

stop_timer = threading.Event()
thread = threading.Thread(target=run_add_coin, args=(stop_timer,))
thread.daemon = True
thread.start()


@bot.message_handler(commands=['balance'])
def show_balance(message):
    user_id = message.from_user.id
    balance = get_user_balance(user_id)
    bot.send_message(message.chat.id, f'–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç–æ–∫üí∞')

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏
@bot.message_handler(commands=['get_image'])
def get_image(message):
    user_id = message.from_user.id
    balance = get_user_balance(user_id)

    if balance >= 2:
        update_user_balance(user_id, -2)
        send_random_image_with_buttons(message)
    else:
        bot.send_message(message.chat.id, f"""–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —à—É—Ç–æ—á–∫–∏ –ø—Ä–æ –º–∞–º–∞—à—É –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, 
–∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç—å—Å—è 1 –º–æ–Ω–µ—Ç–∫–∞! 
–°—Ç–æ–∏–º–æ—Å—Ç—å 1 –∫–∞—Ä—Ç–∏–Ω–∫–∏ - 2 –º–æ–Ω–µ—Ç–∫–∏
–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç–æ–∫üí∞ """)


def send_random_image_with_buttons(message):
    conn = sqlite3.connect('image_database.db')
    cursor = conn.cursor()
    cursor.execute('SELECT image FROM images ORDER BY RANDOM() LIMIT 1')
    image = cursor.fetchone()
    conn.close()

    if image:
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        markup = InlineKeyboardMarkup()
        next_button = InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞", callback_data="next_image")
        markup.add(next_button)


        bot.send_photo(message.chat.id, image[0], reply_markup=markup)
    else:
        bot.send_message(message.chat.id, 'No images in the database')


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    user_id = call.from_user.id
    if call.data == "next_image":
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
        balance = get_user_balance(user_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏
        if balance >= 2:
            update_user_balance(user_id, -2)  # –°–Ω–∏–º–∞–µ–º 2 –º–æ–Ω–µ—Ç—ã
            get_image(call.message)  # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏
        else:
            bot.send_message(call.message.chat.id, f"""–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —à—É—Ç–æ—á–∫–∏ –ø—Ä–æ –º–∞–º–∞—à—É –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, 
–∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç—å—Å—è 1 –º–æ–Ω–µ—Ç–∫–∞! 
–°—Ç–æ–∏–º–æ—Å—Ç—å 1 –∫–∞—Ä—Ç–∏–Ω–∫–∏ - 2 –º–æ–Ω–µ—Ç–∫–∏
–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç–æ–∫üí∞""")
# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_photo(message.chat.id, open('welcomePhoto.jfif', 'rb'), caption="""–û—É –¥–∞, –ú–∞–∫–≤–∏–Ω –≥–æ—Ç–æ–≤!üöò
–•–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —à—É—Ç–æ—á–∫–∏ –ø—Ä–æ –º–∞–º–∞—à—É –ø–∏—à–∏ - /get_image üåº 
–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å –º–æ–Ω–µ—Ç–æ–∫ - /balance üí∏


‚û°Ô∏è–•–æ—Ç–∏—Ç–µ —Å–≤–æ–µ–≥–æ —Ç–µ–ª–≥—Ä–∞–º–º/–¥–∏—Å–∫–æ—Ä–¥ –±–æ—Ç–∞? - @zefruuu
‚û°Ô∏è–ù–µ–¥–æ—Ä–æ–≥–∞—è —Ä–µ–∫–ª–∞–º–∞ - @zefruuu """, reply_markup=markup)
    
#donat
@bot.message_handler(commands=['donate'])
def donat(message):
        bot.send_message(
                message.chat.id,
                    """üí∏–î–æ–Ω–∞—Çüí∏
                    
40 –º–æ–Ω–µ—Ç–æ–∫üí∞(20 –∫–∞—Ä—Ç–∏–Ω–æ–∫) - 40 —Ä—É–±/20 –≥—Ä–Ω/230 —Ç–µ–Ω–≥–µ/0.5 –¥–æ–ª–ª–∞—Ä–æ–≤
80 –º–æ–Ω–µ—Ç–æ–∫üí∞(40 –∫–∞—Ä—Ç–∏–Ω–æ–∫) - 75 —Ä—É–±/30 –≥—Ä–Ω/500 —Ç–µ–Ω–≥–µ/0.7 –¥–æ–ª–ª–∞—Ä–æ–≤"""

        )

        # donat
@bot.message_handler(commands=['help'])
def hellp(message):
            bot.send_message(
            message.chat.id,
                """üÜò–ü–æ–º–æ—â—åüÜò
                
/get_image - –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—ÉÔ∏èüñº
/balance - –≤–∞—à –±–∞–ª–∞–Ω—Å –º–æ–Ω–µ—Ç–æ–∫üëõ
/start - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞üîÑ
/help - –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã‚ñ∂Ô∏è

‚û°Ô∏è–•–æ—Ç–∏—Ç–µ —Å–≤–æ–µ–≥–æ —Ç–µ–ª–≥—Ä–∞–º–º/–¥–∏—Å–∫–æ—Ä–¥ –±–æ—Ç–∞? - @zefruuu
‚û°Ô∏è–ù–µ–¥–æ—Ä–æ–≥–∞—è —Ä–µ–∫–ª–∞–º–∞ - @zefruuu
"""
            )

#–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
markup = ReplyKeyboardMarkup(resize_keyboard=True)
item1 = KeyboardButton("/balance üëõ")
item2 = KeyboardButton("/start üîÑ")
item3 = KeyboardButton("/help üÜò")
item4 = KeyboardButton("/get_image üñº")
markup.add(item1, item2)
markup.add(item3, item4)
# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–µ—Ç
@bot.message_handler(commands=['addmoney'])
def add_money(message):
    try:
        user_id = message.from_user.id
        amount = int(message.text.split()[1])
        update_user_balance(user_id, amount)

        new_balance = get_user_balance(user_id)
        bot.send_message(message.chat.id, f'–ú–æ–Ω–µ—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã, –õ—é–±–ª—é –∏–ª—é—à—É')
    except (IndexError, ValueError):
        bot.send_message(message.chat.id, '/addmoney <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>')
    except Exception as e:
        bot.send_message(message.chat.id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')





# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
init_db()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.infinity_polling()


